var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import axios from 'axios';
import { stringify } from 'query-string';
import { BaseTranslator } from '../../util/BaseTranslator';
var LibreTranslateTranslator = /** @class */ (function (_super) {
    __extends(LibreTranslateTranslator, _super);
    function LibreTranslateTranslator(options) {
        var _this = _super.call(this, options) || this;
        // URL of your instance of LibreTranslate
        // for local instance use URL "http://localhost/translate"
        _this.apiEndpoint = 'https://translate.terraprint.co/translate';
        if (options.apiEndpoint) {
            _this.apiEndpoint = options.apiEndpoint;
        }
        return _this;
    }
    LibreTranslateTranslator.getSupportedLanguages = function () {
        // eslint-disable
        // prettier-ignore
        return [
            "en", "ar", "az", "zh", "cs",
            "nl", "eo", "fi", "fr", "de",
            "el", "hi", "hu", "id", "ga",
            "it", "ja", "ko", "fa", "pl",
            "pt", "ru", "sk", "es", "sv",
            "tr", "uk", "vi"
        ];
        // eslint-enable
    };
    LibreTranslateTranslator.prototype.getLengthLimit = function () {
        return 5000;
    };
    LibreTranslateTranslator.prototype.getRequestsTimeout = function () {
        return 300;
    };
    LibreTranslateTranslator.prototype.checkLimitExceeding = function (text) {
        if (Array.isArray(text)) {
            var arrayLen = text.reduce(function (acc, text) { return acc + text.length; }, 0);
            var extra = arrayLen - this.getLengthLimit();
            return extra > 0 ? extra : 0;
        }
        else {
            var extra = text.length - this.getLengthLimit();
            return extra > 0 ? extra : 0;
        }
    };
    LibreTranslateTranslator.prototype.translate = function (text, from, to) {
        return __awaiter(this, void 0, void 0, function () {
            var requestData;
            return __generator(this, function (_a) {
                requestData = {
                    q: text,
                    source: from,
                    target: to,
                    format: 'text',
                };
                if (this.options.apiKey) {
                    requestData['api_key'] = this.options.apiKey;
                }
                return [2 /*return*/, axios
                        .post(this.apiEndpoint, stringify(requestData), {
                        headers: {
                            'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:99.0) Gecko/20100101 Firefox/99.0',
                            Accept: '*/*',
                            'Accept-Language': 'en-US,en;q=0.5',
                            'Sec-Fetch-Dest': 'empty',
                            'Sec-Fetch-Mode': 'cors',
                            'Sec-Fetch-Site': 'same-origin',
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                    })
                        .then(function (rsp) {
                        if (typeof rsp.data !== 'object' ||
                            rsp.data === null ||
                            typeof rsp.data.translatedText !== 'string') {
                            throw new TypeError('Unexpected data');
                        }
                        return rsp.data.translatedText;
                    })];
            });
        });
    };
    LibreTranslateTranslator.prototype.translateBatch = function (texts, from, to) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.all(texts.map(function (text) { return _this.translate(text, from, to); }))];
            });
        });
    };
    LibreTranslateTranslator.translatorName = 'LibreTranslateTranslator';
    LibreTranslateTranslator.isRequiredKey = function () { return false; };
    LibreTranslateTranslator.isSupportedAutoFrom = function () { return true; };
    return LibreTranslateTranslator;
}(BaseTranslator));
export { LibreTranslateTranslator };

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zbGF0b3JzL0xpYnJlVHJhbnNsYXRlVHJhbnNsYXRvci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDMUIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUd6QyxPQUFPLEVBQUUsY0FBYyxFQUFxQixNQUFNLDJCQUEyQixDQUFDO0FBTTlFO0lBQThDLDRDQUErQztJQXlCNUYsa0NBQVksT0FBMkQ7UUFBdkUsWUFDQyxrQkFBTSxPQUFPLENBQUMsU0FLZDtRQVZELHlDQUF5QztRQUN6QywwREFBMEQ7UUFDekMsaUJBQVcsR0FBVywyQ0FBMkMsQ0FBQztRQUtsRixJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUU7WUFDeEIsS0FBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDO1NBQ3ZDOztJQUNGLENBQUM7SUF4QmEsOENBQXFCLEdBQW5DO1FBQ0MsaUJBQWlCO1FBQ2pCLGtCQUFrQjtRQUNsQixPQUFPO1lBQ04sSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7WUFDNUIsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7WUFDNUIsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7WUFDNUIsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7WUFDNUIsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7WUFDNUIsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO1NBQ2hCLENBQUM7UUFDRixnQkFBZ0I7SUFDakIsQ0FBQztJQWNNLGlEQUFjLEdBQXJCO1FBQ0MsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFD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YW5zbGF0b3IvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgc3RyaW5naWZ5IH0gZnJvbSAncXVlcnktc3RyaW5nJztcblxuaW1wb3J0IHsgbGFuZ0NvZGUsIGxhbmdDb2RlV2l0aEF1dG8gfSBmcm9tICcuLi8uLi90eXBlcy9UcmFuc2xhdG9yJztcbmltcG9ydCB7IEJhc2VUcmFuc2xhdG9yLCBUcmFuc2xhdG9yT3B0aW9ucyB9IGZyb20gJy4uLy4uL3V0aWwvQmFzZVRyYW5zbGF0b3InO1xuXG5leHBvcnQgdHlwZSBMaWJyZVRyYW5zbGF0ZVRyYW5zbGF0b3JPcHRpb25zID0ge1xuXHRhcGlFbmRwb2ludD86IHN0cmluZztcbn07XG5cbmV4cG9ydCBjbGFzcyBMaWJyZVRyYW5zbGF0ZVRyYW5zbGF0b3IgZXh0ZW5kcyBCYXNlVHJhbnNsYXRvcjxMaWJyZVRyYW5zbGF0ZVRyYW5zbGF0b3JPcHRpb25zPiB7XG5cdHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgdHJhbnNsYXRvck5hbWUgPSAnTGlicmVUcmFuc2xhdGVUcmFuc2xhdG9yJztcblxuXHRwdWJsaWMgc3RhdGljIGlzUmVxdWlyZWRLZXkgPSAoKSA9PiBmYWxzZTtcblxuXHRwdWJsaWMgc3RhdGljIGlzU3VwcG9ydGVkQXV0b0Zyb20gPSAoKSA9PiB0cnVlO1xuXG5cdHB1YmxpYyBzdGF0aWMgZ2V0U3VwcG9ydGVkTGFuZ3VhZ2VzKCk6IGxhbmdDb2RlW10ge1xuXHRcdC8vIGVzbGludC1kaXNhYmxlXG5cdFx0Ly8gcHJldHRpZXItaWdub3JlXG5cdFx0cmV0dXJuIFtcblx0XHRcdFwiZW5cIiwgXCJhclwiLCBcImF6XCIsIFwiemhcIiwgXCJjc1wiLFxuXHRcdFx0XCJubFwiLCBcImVvXCIsIFwiZmlcIiwgXCJmclwiLCBcImRlXCIsXG5cdFx0XHRcImVsXCIsIFwiaGlcIiwgXCJodVwiLCBcImlkXCIsIFwiZ2FcIixcblx0XHRcdFwiaXRcIiwgXCJqYVwiLCBcImtvXCIsIFwiZmFcIiwgXCJwbFwiLFxuXHRcdFx0XCJwdFwiLCBcInJ1XCIsIFwic2tcIiwgXCJlc1wiLCBcInN2XCIsXG5cdFx0XHRcInRyXCIsIFwidWtcIiwgXCJ2aVwiXG5cdFx0XTtcblx0XHQvLyBlc2xpbnQtZW5hYmxlXG5cdH1cblxuXHQvLyBVUkwgb2YgeW91ciBpbnN0YW5jZSBvZiBMaWJyZVRyYW5zbGF0ZVxuXHQvLyBmb3IgbG9jYWwgaW5zdGFuY2UgdXNlIFVSTCBcImh0dHA6Ly9sb2NhbGhvc3QvdHJhbnNsYXRlXCJcblx0cHJpdmF0ZSByZWFkb25seSBhcGlFbmRwb2ludDogc3RyaW5nID0gJ2h0dHBzOi8vdHJhbnNsYXRlLnRlcnJhcHJpbnQuY28vdHJhbnNsYXRlJztcblxuXHRjb25zdHJ1Y3RvcihvcHRpb25zOiBUcmFuc2xhdG9yT3B0aW9uczxMaWJyZVRyYW5zbGF0ZVRyYW5zbGF0b3JPcHRpb25zPikge1xuXHRcdHN1cGVyKG9wdGlvbnMpO1xuXG5cdFx0aWYgKG9wdGlvbnMuYXBpRW5kcG9pbnQpIHtcblx0XHRcdHRoaXMuYXBpRW5kcG9pbnQgPSBvcHRpb25zLmFwaUVuZHBvaW50O1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBnZXRMZW5ndGhMaW1pdCgpIHtcblx0XHRyZXR1cm4gNTAwMDtcblx0fVxuXG5cdHB1YmxpYyBnZXRSZXF1ZXN0c1RpbWVvdXQoKSB7XG5cdFx0cmV0dXJuIDMwMDtcblx0fVxuXG5cdHB1YmxpYyBjaGVja0xpbWl0RXhjZWVkaW5nKHRleHQ6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkodGV4dCkpIHtcblx0XHRcdGNvbnN0IGFycmF5TGVuID0gdGV4dC5yZWR1Y2UoKGFjYywgdGV4dCkgPT4gYWNjICsgdGV4dC5sZW5ndGgsIDApO1xuXHRcdFx0Y29uc3QgZXh0cmEgPSBhcnJheUxlbiAtIHRoaXMuZ2V0TGVuZ3RoTGltaXQoKTtcblx0XHRcdHJldHVybiBleHRyYSA+IDAgPyBleHRyYSA6IDA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnN0IGV4dHJhID0gdGV4dC5sZW5ndGggLSB0aGlzLmdldExlbmd0aExpbWl0KCk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPiAwID8gZXh0cmEgOiAwO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBhc3luYyB0cmFuc2xhdGUodGV4dDogc3RyaW5nLCBmcm9tOiBsYW5nQ29kZVdpdGhBdXRvLCB0bzogbGFuZ0NvZGUpIHtcblx0XHRjb25zdCByZXF1ZXN0RGF0YTogUmVjb3JkPGFueSwgYW55PiA9IHtcblx0XHRcdHE6IHRleHQsXG5cdFx0XHRzb3VyY2U6IGZyb20sXG5cdFx0XHR0YXJnZXQ6IHRvLFxuXHRcdFx0Zm9ybWF0OiAndGV4dCcsXG5cdFx0fTtcblxuXHRcdGlmICh0aGlzLm9wdGlvbnMuYXBpS2V5KSB7XG5cdFx0XHRyZXF1ZXN0RGF0YVsnYXBpX2tleSddID0gdGhpcy5vcHRpb25zLmFwaUtleTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYXhpb3Ncblx0XHRcdC5wb3N0KHRoaXMuYXBpRW5kcG9pbnQsIHN0cmluZ2lmeShyZXF1ZXN0RGF0YSksIHtcblx0XHRcdFx0aGVhZGVyczoge1xuXHRcdFx0XHRcdCdVc2VyLUFnZW50Jzpcblx0XHRcdFx0XHRcdCdNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IHg4Nl82NDsgcnY6OTkuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC85OS4wJyxcblx0XHRcdFx0XHRBY2NlcHQ6ICcqLyonLFxuXHRcdFx0XHRcdCdBY2NlcHQtTGFuZ3VhZ2UnOiAnZW4tVVMsZW47cT0wLjUnLFxuXHRcdFx0XHRcdCdTZWMtRmV0Y2gtRGVzdCc6ICdlbXB0eScsXG5cdFx0XHRcdFx0J1NlYy1GZXRjaC1Nb2RlJzogJ2NvcnMnLFxuXHRcdFx0XHRcdCdTZWMtRmV0Y2gtU2l0ZSc6ICdzYW1lLW9yaWdpbicsXG5cdFx0XHRcdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSlcblx0XHRcdC50aGVuKChyc3ApID0+IHtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHR5cGVvZiByc3AuZGF0YSAhPT0gJ29iamVjdCcgfHxcblx0XHRcdFx0XHRyc3AuZGF0YSA9PT0gbnVsbCB8fFxuXHRcdFx0XHRcdHR5cGVvZiAocnNwLmRhdGEgYXMgYW55KS50cmFuc2xhdGVkVGV4dCAhPT0gJ3N0cmluZydcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignVW5leHBlY3RlZCBkYXRhJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gKHJzcC5kYXRhIGFzIGFueSkudHJhbnNsYXRlZFRleHQgYXMgc3RyaW5nO1xuXHRcdFx0fSk7XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgdHJhbnNsYXRlQmF0Y2godGV4dHM6IHN0cmluZ1tdLCBmcm9tOiBsYW5nQ29kZVdpdGhBdXRvLCB0bzogbGFuZ0NvZGUpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5hbGwodGV4dHMubWFwKCh0ZXh0KSA9PiB0aGlzLnRyYW5zbGF0ZSh0ZXh0LCBmcm9tLCB0bykpKTtcblx0fVxufVxuIl19
