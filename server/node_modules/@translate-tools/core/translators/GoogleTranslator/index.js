"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.supportedLanguages = exports.GoogleTranslatorTokenFree = exports.GoogleTranslator = exports.AbstractGoogleTranslator = void 0;
var _axios = _interopRequireDefault(require("axios"));
var _queryString = require("query-string");
var _xpath = _interopRequireDefault(require("xpath"));
var _xmldom = require("@xmldom/xmldom");
var _BaseTranslator = require("../../util/BaseTranslator");
var _token = require("./token");
var _utils = require("./utils");
var _languages = require("../../util/languages");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign = void 0 && (void 0).__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
    f,
    y,
    t,
    g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};
var __read = void 0 && (void 0).__read || function (o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
    r,
    ar = [],
    e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
/**
 * Map with languages aliases.
 *
 * Google translator use legacy codes for some languages,
 * this map useful to use actual language codes by aliases
 *
 * @link https://xml.coverpages.org/iso639a.html
 */
var fixedLanguagesMap = {
  he: 'iw',
  jv: 'jw'
};
/**
 * Raw languages array
 */
// eslint-disable
// prettier-ignore
var supportedLanguages = ['af', 'ak', 'am', 'ar', 'as', 'ay', 'az', 'be', 'bg', 'bho', 'bm', 'bn', 'bs', 'ca', 'ceb', 'ckb', 'co', 'cs', 'cy', 'da', 'de', 'doi', 'dv', 'ee', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'fy', 'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'ha', 'haw', 'hi', 'hmn', 'hr', 'ht', 'hu', 'hy', 'id', 'ig', 'ilo', 'is', 'it', 'iw', 'ja', 'jw', 'ka', 'kk', 'km', 'kn', 'ko', 'kri', 'ku', 'ky', 'la', 'lb', 'lg', 'ln', 'lo', 'lt', 'lus', 'lv', 'mai', 'mg', 'mi', 'mk', 'ml', 'mn', 'mni-Mtei', 'mr', 'ms', 'mt', 'my', 'ne', 'nl', 'no', 'nso', 'ny', 'om', 'or', 'pa', 'pl', 'ps', 'pt', 'qu', 'ro', 'ru', 'rw', 'sa', 'sd', 'si', 'sk', 'sl', 'sm', 'sn', 'so', 'sq', 'sr', 'st', 'su', 'sv', 'sw', 'ta', 'te', 'tg', 'th', 'ti', 'tk', 'tl', 'tr', 'ts', 'tt', 'ug', 'uk', 'ur', 'uz', 'vi', 'xh', 'yi', 'yo', 'zh-CN', 'zh-TW', 'zu'];
// eslint-enable
exports.supportedLanguages = supportedLanguages;
var parseXMLResponse = function (text) {
  var doc;
  try {
    doc = new _xmldom.DOMParser().parseFromString(text);
  } catch (err) {
    console.error(err);
    return null;
  }
  var nodesWithTranslation = _xpath.default.select('//pre/*[not(self::i)]', doc);
  if (nodesWithTranslation.length === 0) return null;
  return nodesWithTranslation.map(function (node) {
    var textNodes = _xpath.default.select('//text()', node);
    if (textNodes.length > 1) {
      console.debug('More than one text node found');
    }
    return textNodes.length === 0 ? '' : textNodes.join(' ');
  }).join(' ');
};
/**
 * Common class for google translator implementations
 */
var AbstractGoogleTranslator = /** @class */function (_super) {
  __extends(AbstractGoogleTranslator, _super);
  function AbstractGoogleTranslator() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AbstractGoogleTranslator.isSupportedAutoFrom = function () {
    return true;
  };
  AbstractGoogleTranslator.getSupportedLanguages = function () {
    var reversedLanguagesMap = Object.fromEntries(Object.entries(fixedLanguagesMap).map(function (_a) {
      var _b = __read(_a, 2),
        key = _b[0],
        val = _b[1];
      return [val, key];
    }));
    return (0, _languages.getLanguageCodesISO639v2)(supportedLanguages.map(function (lang) {
      var _a;
      // Replace legacy language codes to actual
      return (_a = reversedLanguagesMap[lang]) !== null && _a !== void 0 ? _a : lang;
    }));
  };
  AbstractGoogleTranslator.prototype.getLengthLimit = function () {
    return 4000;
  };
  AbstractGoogleTranslator.prototype.getRequestsTimeout = function () {
    return 300;
  };
  /**
   * Map ISO lang codes to google translator lang codes
   */
  AbstractGoogleTranslator.prototype.getFixedLanguage = function (lang) {
    var _a;
    if (lang === 'zh') return 'zh-CN';
    return (_a = fixedLanguagesMap[lang]) !== null && _a !== void 0 ? _a : lang;
  };
  return AbstractGoogleTranslator;
}(_BaseTranslator.BaseTranslator);
exports.AbstractGoogleTranslator = AbstractGoogleTranslator;
/**
 * Translator implementation which use Google API with token from https://translate.google.com
 */
var GoogleTranslator = /** @class */function (_super) {
  __extends(GoogleTranslator, _super);
  function GoogleTranslator() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  GoogleTranslator.prototype.checkLimitExceeding = function (text) {
    if (Array.isArray(text)) {
      var encodedText = this.encodeForBatch(text).join('');
      var extra = encodedText.length - this.getLengthLimit();
      return extra > 0 ? extra : 0;
    } else {
      var extra = text.length - this.getLengthLimit();
      return extra > 0 ? extra : 0;
    }
  };
  GoogleTranslator.prototype.translate = function (text, from, to) {
    var _this = this;
    return (0, _token.getToken)(text).then(function (_a) {
      var tk = _a.value;
      var apiPath = 'https://translate.google.com/translate_a/single';
      var data = {
        client: 't',
        sl: _this.getFixedLanguage(from),
        tl: _this.getFixedLanguage(to),
        hl: _this.getFixedLanguage(to),
        dt: ['at', 'bd', 'ex', 'ld', 'md', 'qca', 'rw', 'rm', 'ss', 't'],
        ie: 'UTF-8',
        oe: 'UTF-8',
        otf: 1,
        ssel: 0,
        tsel: 0,
        kc: 7,
        q: text,
        tk: tk
      };
      var url = apiPath + '?' + (0, _queryString.stringify)(data);
      return _axios.default.get(_this.wrapUrlToCorsProxy(url), {
        withCredentials: false,
        headers: _this.options.headers
      }).then(function (rsp) {
        return rsp.data;
      }).then(function (rsp) {
        if (!(rsp instanceof Array) || !(rsp[0] instanceof Array)) {
          throw new Error('Unexpected response');
        }
        var translatedText = rsp[0].map(function (chunk) {
          return chunk instanceof Array && typeof chunk[0] === 'string' ? chunk[0] : '';
        }).join('');
        return translatedText;
      });
    });
  };
  GoogleTranslator.prototype.translateBatch = function (text, from, to) {
    var _this = this;
    var preparedText = this.encodeForBatch(text);
    return (0, _token.getToken)(preparedText.join('')).then(function (_a) {
      var tk = _a.value;
      var apiPath = 'https://translate.googleapis.com/translate_a/t';
      var data = {
        anno: 3,
        client: 'te',
        v: '1.0',
        format: 'html',
        sl: _this.getFixedLanguage(from),
        tl: _this.getFixedLanguage(to),
        tk: tk
      };
      var url = apiPath + '?' + (0, _queryString.stringify)(data);
      var body = preparedText.map(function (text) {
        return "&q=".concat(encodeURIComponent(text));
      }).join('');
      return (0, _axios.default)({
        url: _this.wrapUrlToCorsProxy(url),
        method: 'POST',
        withCredentials: false,
        headers: __assign({
          'Content-Type': 'application/x-www-form-urlencoded'
        }, _this.options.headers),
        data: body
      }).then(function (rsp) {
        return rsp.data;
      }).then(function (rawResp) {
        try {
          if (!Array.isArray(rawResp)) {
            throw new Error('Unexpected response');
          }
          var isSingleResponseMode_1 = text.length === 1;
          var result_1 = [];
          (0, _utils.visitArrayItems)(rawResp, function (obj) {
            if (isSingleResponseMode_1 && result_1.length === 1) return;
            if (typeof obj !== 'string') return;
            if (isSingleResponseMode_1) {
              var parsedText = parseXMLResponse(obj);
              result_1.push(parsedText || obj);
            } else {
              var parsedText = parseXMLResponse(obj);
              if (parsedText !== null) {
                result_1.push(parsedText);
              }
            }
          });
          if (result_1.length !== text.length) {
            throw new Error('Mismatching a lengths of original and translated arrays');
          }
          return result_1;
        } catch (err) {
          console.warn('Got response', rawResp);
          throw err;
        }
      });
    });
  };
  GoogleTranslator.prototype.encodeForBatch = function (textList) {
    return textList.map(function (text, i) {
      return "<pre><a i=\"".concat(i, "\">").concat(text, "</a></pre>");
    });
  };
  GoogleTranslator.translatorName = 'GoogleTranslator';
  return GoogleTranslator;
}(AbstractGoogleTranslator);
exports.GoogleTranslator = GoogleTranslator;
/**
 * Translator implementation which use Google API without token
 */
var GoogleTranslatorTokenFree = /** @class */function (_super) {
  __extends(GoogleTranslatorTokenFree, _super);
  function GoogleTranslatorTokenFree() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.translate = function (text, from, to) {
      return __awaiter(_this, void 0, void 0, function () {
        var _a, translation;
        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              return [4 /*yield*/, this.translateBatch([text], from, to)];
            case 1:
              _a = __read.apply(void 0, [_b.sent(), 1]), translation = _a[0];
              return [2 /*return*/, translation];
          }
        });
      });
    };
    return _this;
  }
  GoogleTranslatorTokenFree.prototype.translateBatch = function (text, from, to) {
    var apiPath = 'https://translate.googleapis.com/translate_a/t';
    var data = {
      client: 'dict-chrome-ex',
      sl: this.getFixedLanguage(from),
      tl: this.getFixedLanguage(to),
      q: text
    };
    var url = apiPath + '?' + (0, _queryString.stringify)(data);
    return (0, _axios.default)({
      url: this.wrapUrlToCorsProxy(url),
      method: 'GET',
      withCredentials: false,
      headers: __assign({
        'Content-Type': 'application/x-www-form-urlencoded'
      }, this.options.headers)
    }).then(function (rsp) {
      return rsp.data;
    }).then(function (rawResp) {
      try {
        if (!Array.isArray(rawResp)) {
          throw new Error('Unexpected response');
        }
        var intermediateTextsArray_1 = [];
        (0, _utils.visitArrayItems)(rawResp, function (obj) {
          if (typeof obj === 'string') {
            intermediateTextsArray_1.push(obj);
          }
        });
        var result = [];
        var isSingleResponseMode = text.length === 1;
        var isOneToOneMappingMode = intermediateTextsArray_1.length === text.length;
        for (var idx in intermediateTextsArray_1) {
          var text_1 = intermediateTextsArray_1[idx];
          if (isSingleResponseMode) {
            result.push(text_1);
            break;
          }
          // Each second text it's not translation if not 1-1 mapping
          var isTranslation = isOneToOneMappingMode || Number(idx) % 2 === 0;
          if (isTranslation) {
            result.push(text_1);
          }
        }
        if (result.length !== text.length) {
          console.warn('Translation result', result);
          throw new Error('Mismatching a lengths of original and translated arrays');
        }
        return result;
      } catch (err) {
        console.warn('Got response', rawResp);
        throw err;
      }
    });
  };
  GoogleTranslatorTokenFree.translatorName = 'GoogleTranslatorTokenFree';
  return GoogleTranslatorTokenFree;
}(AbstractGoogleTranslator);
exports.GoogleTranslatorTokenFree = GoogleTranslatorTokenFree;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
